#ifndef BODY_H
#define BODY_H

#include <QObject>

#include "bone.h"
#include "bonebox.h"
#include "src/core/brainiacglobals.h"

class Agent;

class Body: public QObject {
    Q_OBJECT
public:
    explicit Body(QObject *parent = nullptr);
    void addBone(Bone* newBone);

    /**
     * Adds a new BoneBox to the Body.
     *
     * This method creates a new BoneBox object with the given id, parentId, and name parameters and adds it to the Body.
     *
     * @param id The unique identifier for the new BoneBox.
     * @param parentId The unique identifier of the parent BoneBox. Default is 0.
     * @param name The name of the new BoneBox. Default is an empty string.
     * @return A pointer to the newly created BoneBox object.
     *
     * @see BoneBox, Body
     */
    BoneBox * addBoneBox(BrainiacGlobals::BrainiacId id, BrainiacGlobals::BrainiacId parentId=0, const QString& name="");
    [[nodiscard]] QHash<BrainiacGlobals::BrainiacId, Bone *> bones() const;
    [[nodiscard]] BrainiacGlobals::BrainiacId newId() const;

    /**
     * Retrieves the QML representation of the skeleton.
     * The skeleton QML is generated by traversing the bones hierarchy, starting from the root bone.
     * Each bone is represented by a QML item.
     *
     * @return The QML representation of the skeleton.
     *         If the root bone is not found, an empty string is returned.
     */
    [[nodiscard]] QString skeletonQML() const;

private:
    Agent *m_agent;
    QHash<BrainiacGlobals::BrainiacId, Bone*> m_bones;
    void skeletonQmlTraverse(quint32 level, const Bone *bone, QString &qml) const;

};



#endif //BODY_H
