#ifndef BODY_H
#define BODY_H

#include <QObject>

#include "bone.h"
#include "bonebox.h"
#include "src/core/brainiacglobals.h"

class Agent;

class Body: public QObject {
    Q_OBJECT
public:
    explicit Body(QObject *parent = nullptr);
    void addBone(Bone* newBone);

    /**
     * Adds a new BoneBox to the Body.
     *
     * This method creates a new BoneBox object with the given id, parentId, and name parameters and adds it to the Body.
     *
     * @param id The unique identifier for the new BoneBox.
     * @param parentId The unique identifier of the parent BoneBox. Default is 0.
     * @param name The name of the new BoneBox. Default is an empty string.
     * @return A pointer to the newly created BoneBox object.
     *
     * @see BoneBox, Body
     */
    BoneBox * addBoneBox(BrainiacGlobals::BrainiacId id, BrainiacGlobals::BrainiacId parentId=0, const QString& name="");
    [[nodiscard]] QHash<BrainiacGlobals::BrainiacId, Bone *> bones() const;
    [[nodiscard]] BrainiacGlobals::BrainiacId newId() const;

    /**
     * Retrieves the QML representation of the skeleton.
     * The skeleton QML is generated by traversing the bones hierarchy, starting from the root bone.
     * Each bone is represented by a QML item.
     *
     * @return The QML representation of the skeleton.
     *         If the root bone is not found, an empty string is returned.
     */
    [[nodiscard]] QString skeletonQML() const;

    [[nodiscard]] QString skinQML() const;

    [[nodiscard]] QList<BrainiacGlobals::BrainiacId> boneOrder() const;

    [[nodiscard]] Agent *agent() const;

    void setBones(const QHash<BrainiacGlobals::BrainiacId, Bone *> &newBones);

private:
    Agent *m_agent;
    QHash<BrainiacGlobals::BrainiacId, Bone*> m_bones;
    /**
     * @var m_boneOrder
     * @brief The ordered list of bone IDs.
     *
     * This variable stores the ordered list of bone IDs in the Body class.
     * The bone order determines the hierarchy of the bones in the skeleton.
     * Each ID corresponds to a BoneBox object in the Body. This is important, because the IDs of a given bone differs
     * from the weight in the skinning process. The index of the bone of this list is the corresponding joint in the
     * QQuick3d-Skinning process.
     *
     * Example usage:
     * @code
     * QList<BrainiacGlobals::BrainiacId> boneOrder = body.boneOrder();
     * foreach (BrainiacGlobals::BrainiacId boneId, boneOrder) {
     *     BoneBox *bone = body.bones().value(boneId);
     *     // Perform operations on the bone
     * }
     * @endcode
     *
     * @see BoneBox, Body, Bone
     */
    QList<BrainiacGlobals::BrainiacId> m_boneOrder;

    void skeletonQmlTraverse(quint32 level, const Bone *bone, QString &qml) const;

};



#endif //BODY_H
